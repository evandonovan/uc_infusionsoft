<?php

/* Whether this module is in debug mode. */
define('DEBUG_MODE', TRUE);

/* InfusionSoft tag for NET Student */
define('TAG_NET_STUDENT', 279);

/* Used in InvoiceService.createBlankOrder */
define('AFFILIATE_NONE', 0);

/* Used in InvoiceService.addOrderItem */
define('TYPE_PRODUCT', 4);

/**
 * Implements hook_order().
 * Pushes users to Infusionsoft when they make an Ubercart purchase.
 */
function uc_infusionsoft_order($op, &$order, $arg2) {
  // Only do this action on the initial checkout.
  // @todo: Figure out why it wouldn't work on order_status == 'completed'
  if($op == 'save' && $order->order_status == 'in_checkout') {
    // Create or update the Infusionsoft contact
    $i_contact_id = uc_infusionsoft_update_contact($order);
    i_dpm($i_contact_id, 'uc_infusionsoft_update_contact');
    
    // Tag the new or updated Infusionsoft Contact
    $result = uc_infusionsoft_tag_contact($i_contact_id);
    i_dpm($result, 'uc_infusionsoft_tag_contact');
    
    // Create the linked Infusionsoft Order and Product Line Items 
    if(is_numeric($i_contact_id) && $i_contact_id > 0) {
      $result = uc_infusionsoft_create_order($i_contact_id, $order);
      i_dpm($result, 'uc_infusionsoft_create_order');
    }
  }
}

/**
 * Pushes the contact to Infusionsoft
 * from the Ubercart order.
 */
function uc_infusionsoft_update_contact($order) {
  // Get the email from the extra email address field
  // or else from the primary email
  $mail = (isset($order->extra_fields['ucxf_email_address_billing'])) ? 
    $order->extra_fields['ucxf_email_address_billing'] : $order->primary_email;

  $contact = array(
    'FirstName' => $order->billing_first_name,
    'LastName' => $order->billing_last_name,
    'Email' => $mail,
    'StreetAddress1' => $order->billing_street1,
    'City' => $order->billing_city,
    'PostalCode' => $order->billing_postal_code,
    'State' => uc_infusionsoft_export_zone($order, 'billing_zone'),
    'Country' => uc_infusionsoft_export_country($order, 'billing_country'),
    'Phone1' => $order->billing_phone,
    'ContactType' => 'Customer',
    'Leadsource' => 'NET Site Purchase'
  );
 
  $i_contact_id = infusionsoft_update_contact($contact);
  return $i_contact_id;
}

/**
* Tags the new or updated Infusionsoft Contact 
*/
function uc_infusionsoft_tag_contact($i_contact_id) {
  $result = FALSE;
  // Apply the NET Student tag
  if(is_numeric($i_contact_id) && $i_contact_id > 0) {
    $result = infusionsoft_send_request('ContactService.addToGroup', (int) $i_contact_id, TAG_NET_STUDENT);
  }
  return $result;
}

/** 
  * Places an Infusionsoft Order 
  * based on the details of the Ubercart order.
  */
function uc_infusionsoft_create_order($i_contact_id, $order) {
  // Preliminary variable setup.
  $result = NULL;
  $order_name = 'NET Order #' . $order->order_id;
  $dt_obj = uc_infusionsoft_get_datetime(); // Date order placed (in XML-RPC format)
  
  // Check to see if there are duplicates
  $i_orders = infusionsoft_findbyfield_all('Job', 'JobTitle', $order_name, array('Id'));
  if(isset($i_orders[0]['Id'])) {
    $result = array('message' => 'Found existing order', 'i_order_id' => $i_orders[0]['Id']);
  }
  
  // Create the basic order
  $i_order_id = infusionsoft_send_request('InvoiceService.createBlankOrder', (int) $i_contact_id, 
    $order_name, $dt_obj, AFFILIATE_NONE, AFFILIATE_NONE);
  $result = array('i_order_id' => $i_order_id); 
  // Attach the products to the order
  if(is_numeric($i_order_id) && $i_order_id > 0) {
    foreach($order->products as $product) {
      // Load the product id in Infusionsoft
      $i_products = infusionsoft_findbyfield_all('Product', 'Sku', $product->model, array('Id'));
  
      // Attach the product to the order if found
      if(isset($i_products[0]['Id']) && is_numeric($i_products[0]['Id'])) {
        $i_product_id = $i_products[0]['Id'];
        $product_result = infusionsoft_send_request('InvoiceService.addOrderItem', (int) $i_order_id, 
          (int) $i_product_id, TYPE_PRODUCT, (double) $product->price, 
          (int) $product->qty, $product->title, $product->title);
        if($product_result == TRUE) {
          $result['i_product_id'][] = $i_product_id;
        }
      }
    }
  }
  return $result;
}

// Callback for exporting state, province, administrative zone code
function uc_infusionsoft_export_zone($order, $fieldname) {
  $zone = NULL;
  if(($fieldname == 'billing_zone' || $fieldname == 'delivery_zone') && isset($order->$fieldname)) {
    $zone = uc_zone_get_by_id($order->$fieldname); 
  }
  return $zone;
}

// Callback for exporting country name
function uc_infusionsoft_export_country($order, $fieldname) {
  $country = NULL;
  if(($fieldname == 'billing_country' || $fieldname == 'delivery_country') && isset($order->$fieldname)) {
    $country = uc_country_get_by_id($order->$fieldname);
  }    
  return $country;
}

// Utility function: creates date object for XML-RPC
// @todo: Make this more concise, less fragile?
function uc_infusionsoft_get_datetime($time = NULL) {
  if($time == NULL) {
    $time = time();
  }
  $dt_obj = getdate($time);
  $dt_obj['month'] = $dt_obj['mon'];
  if($dt_obj['month'] <= 9) {
    $dt_obj['month'] = '0' . (string) $dt_obj['month'];
  }
  $dt_obj['day'] = $dt_obj['mday'];
  if($dt_obj['day'] <= 9) {
    $dt_obj['day'] = '0' . (string) $dt_obj['day'];
  }
  $dt_obj['hour'] = $dt_obj['hours'];
  if($dt_obj['hour'] <= 9) {
    $dt_obj['hour'] = '0' . (string) $dt_obj['hour'];
  }
  $dt_obj['minute'] = $dt_obj['minutes'];
  if($dt_obj['minute'] <= 9) {
    $dt_obj['minute'] = '0' . (string) $dt_obj['minute'];
  }
  $dt_obj['second'] = $dt_obj['seconds'];
  if($dt_obj['second'] <= 9) {
    $dt_obj['second'] = '0' . (string) $dt_obj['second'];
  }
  $dt_obj = (object) $dt_obj;
  $dt_obj->is_date = TRUE;
  return $dt_obj;
}

// Wrapper function for dpm so code will work if Devel is disabled
function i_dpm($data, $label = NULL, $type = 'status') {
  if(function_exists('dpm') && DEBUG_MODE == TRUE) {
    dpm($data, $label, $type);
  }
}
